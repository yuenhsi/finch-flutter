// Mocks generated by Mockito 5.4.5 from annotations
// in birdo/test/helpers/mock_generator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:birdo/core/services/date_time_service.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DateTimeService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateTimeService extends _i1.Mock implements _i2.DateTimeService {
  MockDateTimeService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> initialize() =>
      (super.noSuchMethod(
            Invocation.method(#initialize, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  DateTime getCurrentDate() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentDate, []),
            returnValue: _FakeDateTime_0(
              this,
              Invocation.method(#getCurrentDate, []),
            ),
          )
          as DateTime);

  @override
  _i3.Future<void> setDayOffset(int? offset) =>
      (super.noSuchMethod(
            Invocation.method(#setDayOffset, [offset]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<int> getDayOffset() =>
      (super.noSuchMethod(
            Invocation.method(#getDayOffset, []),
            returnValue: _i3.Future<int>.value(0),
          )
          as _i3.Future<int>);

  @override
  _i3.Future<void> resetDayOffset() =>
      (super.noSuchMethod(
            Invocation.method(#resetDayOffset, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> incrementDayOffset(int? amount) =>
      (super.noSuchMethod(
            Invocation.method(#incrementDayOffset, [amount]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  String generateDayId(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#generateDayId, [date]),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.method(#generateDayId, [date]),
            ),
          )
          as String);

  @override
  bool isSameDay(DateTime? date1, DateTime? date2) =>
      (super.noSuchMethod(
            Invocation.method(#isSameDay, [date1, date2]),
            returnValue: false,
          )
          as bool);

  @override
  bool isToday(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#isToday, [date]),
            returnValue: false,
          )
          as bool);

  @override
  bool isYesterday(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#isYesterday, [date]),
            returnValue: false,
          )
          as bool);
}
